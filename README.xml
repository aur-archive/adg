<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                         "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<chapter id="README">
<title>ADG overview</title>
<subtitle>How to get start with ADG</subtitle>

<simplesect id="README.general">
<title>General information</title>

<para>Automatic Drawing Generation is GObject-based library that provides
a non-interactive cairo canvas specifically designed for generating
technical drawings.</para>

<para>If you want to develop an application that needs to show and print
drawings where some data change but the overall design is always the
same, the ADG library can be quite useful. In manufacturing industries
this is often a good choice and could help to greatly improve the
productivity of technical offices.</para>

<para>You could reach similar targets using parametric CADs but a custom
application provides the following benefits:</para>

<itemizedlist>
   <listitem>more customizable;</listitem>
   <listitem>quicker and not so bloated as a parametric CAD;</listitem>
   <listitem>can be easily connected to a database;</listitem>
   <listitem>an ADG based filter can generate drawing on-fly: this feature could
   be used in web-based application.</listitem>
</itemizedlist>

<para>For further details, visit the <ulink url="http://adg.entidi.com/">ADG home page</ulink>.</para>

</simplesect>

<simplesect id="README.design">
<title>Design overview</title>

<para>The project grew up around the <ulink url="http://www.gtk.org/">GObject</ulink> library: the
ADG canvas is developed in plain C using the object-oriented approach
supplied by GObject.</para>

<para>The mathematical and geometrical algorithms, together with some useful
function to manipulate cairo paths, are kept in a separated library.
Although the CPML library (Cairo Path Manipulation Library) is scattered
across the ADG tree, it can be easily splitted on its own in future, if
requested.</para>

<para>The rendering is based on the <ulink url="http://cairographics.org/">cairo engine</ulink>,
so the ADG project fully shares strong and weak points of the underlying
cairo library.</para>

<para>For the optional database connectivity, my suggestion is to take a look
to the <ulink url="http://www.gnome-db.org/">libgda</ulink> project, partly because it is a
good and actively maintained project and partly because it uses the ADG
technologies (object-oriented C code using GObject), so can be easily
integrated in a single application.</para>
</simplesect>


<simplesect id="README.dependencies">
<title>External dependencies</title>

<para>The ADG library has the following dependencies:</para>

<itemizedlist>
   <listitem><ulink url="http://www.gtk.org/">glib</ulink> 2.10.1 or later (required)</listitem>
   <listitem><ulink url="http://cairographics.org/">cairo</ulink> 1.7.4 or later (required)</listitem>
   <listitem><ulink url="http://www.gtk.org/">gtk+</ulink> 2.12.0 or later (optional), needed by
   the <command>adg-demo</command> program</listitem>
   <listitem><ulink url="http://www.gtk.org/gtk-doc/">gtk-doc</ulink> 1.9 or later (optional),
   used to regenerate the API documentation</listitem>
</itemizedlist>

<para>The required packages must be installed prior the ADG building: they should
be provided by nearly every decent unix-like system. The ADG is mainly
developed on GNU/Linux systems but its dependecies are known to be cross
platform so a porting should be quite easy (if not automatic).</para>
</simplesect>


<simplesect id="README.installation">
<title>Installation</title>

<para>The ADG build system is based on GNU autotools, the de-facto standard
for managing free software projects.</para>

<orderedlist>
   <listitem>Download the ADG tarball and put it somewhere in your file system,
   where you have write access (your home directory is a good candidate).
   You can browse the old releases or get the latest tarball from
   <ulink url="http://sourceforge.net/projects/adg/files/">sourceforge</ulink>.
   </listitem>
   <listitem>Unpack the tarball. Use the version you downloaded in the previous step
   instead of 0.6.0:
<programlisting>tar xjvf adg-0.6.0.tar.bz2</programlisting></listitem>
   <listitem>Configure the build. You can set different options while configuring:
   check the output of <code>./configure --help</code> to get all the available options.
   Furthermore, the INSTALL file gives you a detailed description of
   the common options.
<programlisting>cd adg-0.6.0
./configure</programlisting></listitem>
   <listitem>Build the ADG library.
<programlisting>make</programlisting>
   Once the building has finished, you are able to run the demo program
   without installing anything. Just try it out:
<programlisting>./demo/adg-demo</programlisting></listitem>
   <listitem>Install the ADG library on your system. You must have root privileges
   to do that or you have to configure a target directory (the <code>--prefix</code>
   option in configure) that is user-writable.
<programlisting>make install</programlisting>
   If you have <code>sudo</code> access you can use it by prefixing the installation
   command to temporary gain root privileges:
<programlisting>sudo make install</programlisting></listitem>
   <listitem>You can uninstall the ADG whenever you want by typing:
<programlisting>make uninstall</programlisting>
   from inside the ADG build directory (or <code>sudo make uninstall</code>). Just
   be sure to have the same privileges you had when installing it.</listitem>
</orderedlist>
</simplesect>

</chapter>
